#ifndef yinsh_mappings
#define yinsh_mappings

#include <unordered_map>

/*
    Two mappings:

    (x,y) <==> 128bit number
*/

struct sachin_coord_t {
    int x, y;
    sachin_coord_t(): x(0), y(0) {}
    sachin_coord_t(int _x, int _y) :x(_x), y(_y) {}

    bool operator==(const sachin_coord_t &other) const
    {
        return (x == other.x && y == other.y);
    }
};

namespace std {
// hash for sachin_coord_t
template<>
struct hash<sachin_coord_t> {
    std::size_t operator()(const sachin_coord_t& p) const
    {
        return 19*p.x + p.y; // this will always be unique for our points!
    }
};

// hash for uint128_t
template<>
struct hash<uint128_t> {
    std::size_t operator()(const uint128_t& x) const
    {
        return (static_cast<unsigned long long>(x >> 64)) ^ (static_cast<unsigned long long>(x));
    }
};
}

typedef uint128_t bitboard_coord_t;

const int E = 1; // just for visually showing the board in syntax-highlighting editors
int sachinCoordsBoard[19][11] = {
//   0  1  2  3  4  5* 6  7  8  9  10
    {0, 0, 0, 0, E, 0, E, 0, 0, 0, 0}, // 0
    {0, 0, 0, E, 0, E, 0, E, 0, 0, 0}, // 1
    {0, 0, E, 0, E, 0, E, 0, E, 0, 0}, // 2
    {0, E, 0, E, 0, E, 0, E, 0, E, 0}, // 3
    {0, 0, E, 0, E, 0, E, 0, E, 0, 0}, // 4
    {0, E, 0, E, 0, E, 0, E, 0, E, 0}, // 5
    {E, 0, E, 0, E, 0, E, 0, E, 0, E}, // 6
    {0, E, 0, E, 0, E, 0, E, 0, E, 0}, // 7
    {E, 0, E, 0, E, 0, E, 0, E, 0, E}, // 8
    {0, E, 0, E, 0, E, 0, E, 0, E, 0}, // 9**********
    {E, 0, E, 0, E, 0, E, 0, E, 0, E}, // 10
    {0, E, 0, E, 0, E, 0, E, 0, E, 0}, // 11
    {E, 0, E, 0, E, 0, E, 0, E, 0, E}, // 12
    {0, E, 0, E, 0, E, 0, E, 0, E, 0}, // 13
    {0, 0, E, 0, E, 0, E, 0, E, 0, 0}, // 14
    {0, E, 0, E, 0, E, 0, E, 0, E, 0}, // 15
    {0, 0, E, 0, E, 0, E, 0, E, 0, 0}, // 16
    {0, 0, 0, E, 0, E, 0, E, 0, 0, 0}, // 17
    {0, 0, 0, 0, E, 0, E, 0, 0, 0, 0}  // 18
};

/*
(18 6) => 19342813113834066795298816
(18 4) => 9671406556917033397649408
(17 7) => 4835703278458516698824704
(17 5) => 2417851639229258349412352
(17 3) => 1208925819614629174706176
(16 8) => 604462909807314587353088
(16 6) => 302231454903657293676544
(7 9) => 8589934592
(6 10) => 268435456
(6 8) => 134217728
(5 9) => 4194304
(5 7) => 2097152
(4 8) => 131072
(4 6) => 65536
(6 0) => 8388608
(14 6) => 590295810358705651712
(2 2) => 32
(10 8) => 562949953421312
(5 5) => 1048576
(1 7) => 16
(7 1) => 536870912
(15 7) => 18889465931478580854784
(3 3) => 1024
(11 9) => 36028797018963968
(5 3) => 524288
(13 9) => 73786976294838206464
(1 5) => 8
(3 1) => 512
(11 7) => 18014398509481984
(5 1) => 262144
(13 7) => 36893488147419103232
(1 3) => 4
(9 9) => 17592186044416
(6 2) => 16777216
(14 8) => 1180591620717411303424
(2 4) => 64
(10 10) => 1125899906842624
(6 4) => 33554432
(2 6) => 128
(8 0) => 17179869184
(0 4) => 1
(8 10) => 549755813888
(4 2) => 16384
(12 8) => 1152921504606846976
(6 6) => 67108864
(2 8) => 256
(8 2) => 34359738368
(0 6) => 2
(4 4) => 32768
(12 10) => 2305843009213693952
(7 3) => 1073741824
(15 9) => 37778931862957161709568
(3 5) => 2048
(7 5) => 2147483648
(3 7) => 4096
(7 7) => 4294967296
(3 9) => 8192
(8 4) => 68719476736
(8 6) => 137438953472
(8 8) => 274877906944
(9 1) => 1099511627776
(9 3) => 2199023255552
(9 5) => 4398046511104
(9 7) => 8796093022208
(10 0) => 35184372088832
(10 2) => 70368744177664
(10 4) => 140737488355328
(10 6) => 281474976710656
(11 1) => 2251799813685248
(11 3) => 4503599627370496
(11 5) => 9007199254740992
(12 0) => 72057594037927936
(12 2) => 144115188075855872
(12 4) => 288230376151711744
(12 6) => 576460752303423488
(13 1) => 4611686018427387904
(13 3) => 9223372036854775808
(13 5) => 18446744073709551616
(14 2) => 147573952589676412928
(14 4) => 295147905179352825856
(15 1) => 2361183241434822606848
(15 3) => 4722366482869645213696
(15 5) => 9444732965739290427392
(16 2) => 75557863725914323419136
(16 4) => 151115727451828646838272
*/
const unordered_map<sachin_coord_t, bitboard_coord_t> sachin2BitboardMap = [] {
    unordered_map<sachin_coord_t, bitboard_coord_t> m;

    int count = 0;
    for (int i = 0; i < 19; i++) {
        for (int j = 0; j < 11; j++) {
            if (sachinCoordsBoard[i][j] == E) {
                const sachin_coord_t p = { i, j };
                m[ p ] = (static_cast<bitboard_coord_t>(1) << (count++));
            }
        }
    }
    return m;
}();

/*
64 => (2 4)
1180591620717411303424 => (14 8)
35184372088832 => (10 0)
16777216 => (6 2)
9223372036854775808 => (13 3)
17592186044416 => (9 9)
32 => (2 2)
590295810358705651712 => (14 6)
36893488147419103232 => (13 7)
2 => (0 6)
1099511627776 => (9 1)
9444732965739290427392 => (15 5)
512 => (3 1)
281474976710656 => (10 6)
147573952589676412928 => (14 2)
8 => (1 5)
4398046511104 => (9 5)
4 => (1 3)
73786976294838206464 => (13 9)
2199023255552 => (9 3)
1024 => (3 3)
18889465931478580854784 => (15 7)
562949953421312 => (10 8)
536870912 => (7 1)
295147905179352825856 => (14 4)
16 => (1 7)
8796093022208 => (9 7)
18014398509481984 => (11 7)
604462909807314587353088 => (16 8)
32768 => (4 4)
8388608 => (6 0)
4611686018427387904 => (13 1)
262144 => (5 1)
4835703278458516698824704 => (17 7)
144115188075855872 => (12 2)
8589934592 => (7 9)
2417851639229258349412352 => (17 5)
131072 => (4 8)
72057594037927936 => (12 0)
1048576 => (5 5)
19342813113834066795298816 => (18 6)
576460752303423488 => (12 6)
268435456 => (6 10)
1208925819614629174706176 => (17 3)
65536 => (4 6)
36028797018963968 => (11 9)
524288 => (5 3)
9671406556917033397649408 => (18 4)
288230376151711744 => (12 4)
134217728 => (6 8)
302231454903657293676544 => (16 6)
16384 => (4 2)
9007199254740992 => (11 5)
4194304 => (5 9)
2305843009213693952 => (12 10)
2097152 => (5 7)
1152921504606846976 => (12 8)
1125899906842624 => (10 10)
37778931862957161709568 => (15 9)
2048 => (3 5)
33554432 => (6 4)
2361183241434822606848 => (15 1)
128 => (2 6)
70368744177664 => (10 2)
17179869184 => (8 0)
549755813888 => (8 10)
1 => (0 4)
18446744073709551616 => (13 5)
67108864 => (6 6)
4722366482869645213696 => (15 3)
256 => (2 8)
140737488355328 => (10 4)
34359738368 => (8 2)
1073741824 => (7 3)
2147483648 => (7 5)
75557863725914323419136 => (16 2)
4096 => (3 7)
2251799813685248 => (11 1)
4294967296 => (7 7)
151115727451828646838272 => (16 4)
8192 => (3 9)
4503599627370496 => (11 3)
68719476736 => (8 4)
137438953472 => (8 6)
274877906944 => (8 8)
*/
const unordered_map<bitboard_coord_t, sachin_coord_t> bitboard2SachinMap = [] {
    unordered_map<bitboard_coord_t, sachin_coord_t> m;
    for (auto it = sachin2BitboardMap.begin(); it != sachin2BitboardMap.end(); it++) {
        m[it->second] = it->first;
    }
    return m;
}();

#endif

